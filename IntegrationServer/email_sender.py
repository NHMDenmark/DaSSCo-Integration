import sys
import os
script_dir = os.path.abspath(os.path.dirname(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..'))
sys.path.append(project_root)

import datetime
import smtplib
import utility
from dotenv import load_dotenv

class EmailSender:

    def __init__(self, mail):
        load_dotenv()
        self.util = utility.Utility()
        self.mail_config_path = f"{project_root}/IntegrationServer/ConfigFiles/mail_config.json"
        self.mail_configs = self.util.get_value(self.mail_config_path, mail)
        self.server_host = self.mail_configs.get("server_host") 
        self.server_port = self.mail_configs.get("server_port")  
        self.address_from = self.mail_configs.get("sender_address")
        self.address_to = self.mail_configs.get("receiver_address")
        
        # avoids putting emails used for testing into github, just leave config fields blank and configure fields in dotenv file
        if self.address_from == "":
            self.address_from = os.getenv("temp_address_from")
        if self.address_to == "":
            self.address_to = os.getenv("temp_address_to")

        self.mail_server_user = os.getenv(f"mail_server_user_{mail}")
        self.mail_server_pass = os.getenv(f"mail_server_pass_{mail}")


    def send_error_mail(self, guid = "NO_GUID", service = "NO_SERVICE", status = "NO_STATUS", error_msg = "NO_MESSAGE"):

        mail_subject, msg_content = self.create_error_mail_content(guid, service, status, error_msg)

        msg_from = "From: " + self.address_from + "\r\n"
        msg_to = "To: " + self.address_to + "\r\n"
        msg_subject = "Subject: " + mail_subject + "\r\n"
        msg_timestamp = '{:%a, %d %b %Y %H %M:%S %z}'.format(datetime.datetime.now())
        msg_date = "Date: " + msg_timestamp + "\r\n"
        msg = msg_from + msg_to + msg_subject + msg_date + "\r\n" + msg_content
        # connect to smarthost, login, send mail and disconnect
        server = smtplib.SMTP(self.server_host, self.server_port)
        server.ehlo()
        server.starttls()
        server.login(self.mail_server_user, self.mail_server_pass)
        server.sendmail(self.address_from, self.address_to, msg)
        server.quit()

    # Creates the email content that is being send.     
    def create_error_mail_content(self, guid, service, status, error_msg):

        mail_subject = f"{status} - {service} - {guid}"
        timestamp = '{:%d %b %Y %H:%M:%S %z}'.format(datetime.datetime.now())

        mail_msg = f"""
This is an autogenerated message from the integration server.

GUID: {guid}
SERVICE: {service}
STATUS: {status}
TIMESTAMP: {timestamp}    
ERROR MESSAGE: {error_msg} 
                    """

        return mail_subject, mail_msg
